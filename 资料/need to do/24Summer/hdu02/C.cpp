#include<iostream>
#include<string>
#include<vector>
#include<cmath>
#include<algorithm>
#include<queue>
#include<array>
#include<set>
#include<map>
using i64 = long long;
char p[10][13] = {
	{'0', '*', '*', '*', '1', '1', '1', '*', '*', '*', '*', '*', '*'},
	{'0', '*', '*', '*', '1', '1', '1', '*', '*', '*', '*', '*', '*'},
	{'0', '*', '*', '*', '1', '1', '1', '*', '*', '*', '*', '*', '*'},
	{'0', '*', '*', '*', '1', '1', '1', '*', '*', '*', '*', '*', '*'},
	{'0', '2', '2', '2', '3', '3', '3', '4', '4', '4', '5', '5', '5'},
	{'0', '2', '2', '2', '3', '3', '3', '4', '4', '4', '5', '5', '5'},
	{'0', '2', '2', '2', '3', '3', '3', '4', '4', '4', '5', '5', '5'},
	{'0', '*', '*', '*', '6', '6', '6', '*', '*', '*', '*', '*', '*'},
	{'0', '*', '*', '*', '6', '6', '6', '*', '*', '*', '*', '*', '*'},
	{'0', '*', '*', '*', '6', '6', '6', '*', '*', '*', '*', '*', '*'}
};
struct node {
	char s[10][12];
};
std::map<std::string, bool> mp;
void trans(int id) {
	if (id == 1) {
		char c[4];
		for (int i = 1; i <= 3; i ++) {
			c[i] = p[4][i];
		}
		for (int i = 1; i <= 9; i ++) {
			p[4][i] = p[4][i + 3];
		}
		for (int i = 10; i <= 12; i ++) {
			p[4][i] = c[i - 9];
		}
		// 1 rotate
	}
	if (id == 2) {
		char c[4];
		for (int i = 1; i <= 3; i ++) {
			c[i] = p[6][i];
		}
		for (int i = 1; i <= 9; i ++) {
			p[6][i] = p[6][i + 3];
		}
		for (int i = 10; i <= 12; i ++) {
			p[6][i] = c[i - 9];
		}
		// 6 
	}
	if (id == 3) {
		char c[4];
		for (int i = 1; i <= 3; i ++) {
			c[i] = p[i][4];
		}
		for (int i = 1; i <= 6; i ++) {
			p[i][4] = p[i + 3][4];
		}
		for (int i = 7; i <= 9; i ++) {
			p[i][4] = p[10 - i + 3][12];
		}
		for (int i = 4; i <= 6; i ++) {
			p[i][12] = c[7 - i];
		}
		// 2
	}
	if (id == 4) {
		char c[4];
		for (int i = 1; i <= 3; i ++) {
			c[i] = p[i][6];
		}
		for (int i = 1; i <= 6; i ++) {
			p[i][6] = p[i + 3][6];
		}
		for (int i = 7; i <= 9; i ++) {
			p[i][6] = p[10 - i + 3][10];
		}
		for (int i = 4; i <= 6; i ++) {
			p[i][10] = c[7 - i];
		}
		// 4
	}
	if (id == 5) {
		char c[4];
		for (int i = 1; i <= 3; i ++) {
			c[i] = p[7 - i][10];
		}
		for (int i = 4; i <= 6; i ++) {
			p[i][10] = p[13 - i][6];
		}
		for (int i = 9; i >= 4; i --) {
			p[i][6] = p[i - 3][6];
		}
		for (int i = 1; i <= 3; i ++) {
			p[i][6] = c[i];
		}
	}
	if (id == 6) {
		char c[4];
		for (int i = 1; i <= 3; i ++) {
			c[i] = p[7 - i][12];
		}
		for (int i = 4; i <= 6; i ++) {
			p[i][12] = p[13 - i][4];
		}
		for (int i = 9; i >= 4; i --) {
			p[i][4] = p[i - 3][4];
		}
		for (int i = 1; i <= 3; i ++) {
			p[i][4] = c[i];
		}
	}
	if (id == 7) {
		char c[4];
		for (int i = 10; i <= 12; i ++) {
			c[i - 9] = p[6][i];
		}
		for (int i = 12; i >= 4; i --) {
			p[6][i] = p[6][i - 3];
		}
		for (int i = 1; i <= 3; i ++) {
			p[6][i] = c[i];
		}
	}
	if (id == 8) {
		char c[4];
		for (int i = 10; i <= 12; i ++) {
			c[i - 9] = p[4][i];
		}
		for (int i = 12; i >= 4; i --) {
			p[4][i] = p[4][i - 3];
		}
		for (int i = 1; i <= 3; i ++) {
			p[4][i] = c[i];
		}
	}
}
void pre() {
	for (int i = 1; i <= 12; i ++) {
		trans(i);
		for (int j = 1; j <= 12; j ++) {
			trans(j);
			for (int k = 1; k <= 12; k ++) {
				trans(k);



				trans(12 - k + 1);
			}
			trans(12 - j + 1);
		}
		trans(12 - i + 1);
	}
}
void solve() {
	
} 
int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(nullptr);
	pre();
	int t = 1;
	std::cin >> t;
	while (t --) {
		solve();
	}
	return 0;
}
/*
{'0', '*', '*', '*', '1', '1', '1', '*', '*', '*', '*', '*', '*'},
{'0', '*', '*', '*', '1', '1', '1', '*', '*', '*', '*', '*', '*'},
{'0', '*', '*', '*', '1', '1', '1', '*', '*', '*', '*', '*', '*'},
{'0', '*', '*', '*', '1', '1', '1', '*', '*', '*', '*', '*', '*'},
{'0', '2', '2', '2', '3', '3', '3', '4', '4', '4', '5', '5', '5'},
{'0', '2', '2', '2', '3', '3', '3', '4', '4', '4', '5', '5', '5'},
{'0', '2', '2', '2', '3', '3', '3', '4', '4', '4', '5', '5', '5'},
{'0', '*', '*', '*', '6', '6', '6', '*', '*', '*', '*', '*', '*'},
{'0', '*', '*', '*', '6', '6', '6', '*', '*', '*', '*', '*', '*'},
{'0', '*', '*', '*', '6', '6', '6', '*', '*', '*', '*', '*', '*'}
*/